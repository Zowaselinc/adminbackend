import type { Pool } from 'mysql2/promise';
import { QueryBase } from './query-base';
import type { SingleConnection, GlobalOpts } from './types';
export * from './types';
export declare class MySQL2Extended extends QueryBase {
    protected driver: Pool | SingleConnection;
    protected opts?: GlobalOpts | undefined;
    constructor(driver: Pool | SingleConnection, opts?: GlobalOpts | undefined);
    begin(): Promise<Transaction>;
    transaction<ResultT>(callback: (transaction: Transaction) => Promise<ResultT>): Promise<ResultT>;
}
export declare class Transaction extends QueryBase {
    protected con: SingleConnection;
    protected opts?: GlobalOpts | undefined;
    protected hasBegin: boolean;
    protected lastAction?: 'COMMIT' | 'ROLLBACK';
    constructor(con: SingleConnection, opts?: GlobalOpts | undefined);
    _begin(): Promise<void>;
    commit(): Promise<void>;
    rollback(): Promise<void>;
    protected closeConnection(con: SingleConnection): Promise<void>;
    protected getConnection(): Promise<SingleConnection>;
    validateCleanAndMarkDirty(action: 'COMMIT' | 'ROLLBACK'): void;
}
